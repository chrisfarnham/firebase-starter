{"version":3,"sources":["dice_and_clocks/firebase_database.cljs"],"mappings":"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","names":["re_frame.core.reg_event_fx","p__48735","vec__48736","cljs.core.nth","_","error","js/console.error","p__48739","vec__48740","js/console.log","dice-and-clocks.firebase-database/default-pass-fail","dice-and-clocks.firebase-database/success-failure-dispatch","args","map__48743","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","on-success","on-failure","cljs.core.merge","err","re-frame.core/dispatch","dice-and-clocks.firebase-database/->path","p","clojure.string.join","cljs-bean.core/->js","dice-and-clocks.firebase-database/database-ref","path","js/firebase","p__48745","map__48746","dice-and-clocks.firebase-database/ref-set","value","dice-and-clocks.firebase-database/get-push-key","push-key","cljs.core.concat","re-frame.core/reg-fx","cljs.core.update","p__48748","vec__48749","p__48752","map__48753","dice-and-clocks.firebase-database/on-value-reaction","ref","reaction","reagent.core.atom","callback","x","cljs.core/reset!","G__48755","cljs-bean.core/->clj","reagent.ratom.make_reaction","cljs.core/deref","re_frame.core.reg_sub","p__48756","vec__48757","cljs.core/identity"],"sourcesContent":["(ns dice-and-clocks.firebase-database\n  (:require [re-frame.core :as rf]\n            [reagent.core :as r]\n            [reagent.ratom :as ratom]\n            [cljs-bean.core :refer [->js ->clj]]\n            [clojure.string :as string]))\n\n(rf/reg-event-fx\n ::firebase-error\n (fn [_ [_ error]]\n   (js/console.error (str \"error:\\n\" error))))\n\n(rf/reg-event-fx\n ::firebase-success\n (fn [_ [_]]\n   (js/console.log (str \"Write Succeeded\"))))\n\n(def default-pass-fail\n  {:on-success [::firebase-success]\n   :on-failure [::firebase-error]})\n\n(defn success-failure-dispatch [args]\n  (let [{:keys [on-success on-failure]} (merge default-pass-fail args)]\n    (fn [err]\n      (rf/dispatch\n       (if (nil? err)\n         on-success\n         on-failure)))))\n\n(defn ->path [p]\n  (string/join \"/\" (->js p)))\n\n(defn database-ref [path]\n  (-> (.database ^js js/firebase)\n      (.ref (->path path))))\n\n(defn- ref-set [{:keys [path value] :as args}]\n  (.set (database-ref path)\n        (->js value)\n        (success-failure-dispatch args)))\n\n(defn get-push-key [path]\n  (let [push-key (-> (database-ref path)\n                     (.push)\n                     (.-key))]\n    (concat path [push-key])))\n\n(rf/reg-fx ::push-fx\n           (fn [args]\n             (ref-set\n              (-> args\n                  (update :path get-push-key)))))\n\n(rf/reg-event-fx\n ::push\n (fn [_ [_ args]]\n   {::push-fx args}))\n\n(defn on-value-reaction\n  \"returns a reagent atom that will always have the latest value at 'path' in the Firebase database\"\n  [{:keys [path] :as args}]\n  (let [ref ^js (database-ref path)\n        reaction (r/atom nil)\n        callback (fn [^js x] (reset! reaction (some-> x (.val) ->clj)))]\n    (.on ref \"value\" callback (success-failure-dispatch args))\n    (ratom/make-reaction\n     (fn [] @reaction)\n     :on-dispose #(do (.off ref \"value\" callback)))))\n\n(rf/reg-sub ::realtime-value\n            (fn [[_ args]]\n              (on-value-reaction args))\n            identity)"]}