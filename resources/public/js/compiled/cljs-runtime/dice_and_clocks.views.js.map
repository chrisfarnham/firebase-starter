{"version":3,"sources":["dice_and_clocks/views.cljs"],"mappings":"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","names":["dice-and-clocks.views/auth-display","user","or__4126__auto__","re-frame.core/dispatch","dice-and-clocks.views/add-todo","persist-todo","with-let46185","reagent.ratom/with-let-values","temp__5758__auto__","reagent.ratom/*ratom-context*","c__45666__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init46186","res__45667__auto__","cljs.core/deref","new-todo","reagent.core.atom","e","cljs.core/reset!","clojure.string/blank?","G__46187","dice-and-clocks.views/todo-list","todos","mark-done","cljs.core.remove","p__46194","vec__46195","cljs.core.nth","map__46198","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","_","done?","cljs.core.map","p__46188","vec__46189","map__46192","id","description","dice-and-clocks.views/main-panel","name","re_frame.core.subscribe","db-connected?","todos-path","todo","todo-id","cljs.core.concat"],"sourcesContent":["(ns dice-and-clocks.views\n  (:require\n   [re-frame.core :as rf]\n   [reagent.core :as r]\n   [clojure.string :as string]\n   [dice-and-clocks.firebase-auth :as auth]\n   [dice-and-clocks.firebase-database :as db]\n   [dice-and-clocks.subs :as subs]\n   [dice-and-clocks.config :as config]\n   ))\n\n(defn auth-display [user]\n  [:div\n   (when user\n     [:span (str \"Logged in as: \" (or (:displayName user) (:email user)))])\n   [:br]\n   [:button {:on-click #(rf/dispatch [(if user ::auth/sign-out ::auth/sign-in)])}\n    (if user\n      \"Sign out\"\n      \"Sign in\")]])\n\n(defn add-todo [persist-todo]\n  (r/with-let [new-todo (r/atom nil)]\n    [:<>\n     [:div \"Input new Todo:\"]\n     [:input {:type  :text\n              :value @new-todo\n              :on-change\n              (fn [^js e] (reset! new-todo (.. e -target -value)))}]\n     [:button {:disabled (string/blank? @new-todo)\n               :on-click (fn []\n                           (persist-todo @new-todo)\n                           (reset! new-todo nil))} \"Save\"]]))\n\n(defn todo-list [todos mark-done]\n  [:div\n   [:h2 \"Todos\"]\n   (->> todos\n        (remove (fn [[_ {:keys [done?]}]]\n                  done?))\n        (map (fn [[id {:keys [description]}]]\n               ^{:key id}\n               [:div {:style {:padding \"5px\"\n                              :border-bottom \"solid\"\n                              :border-color \"gray\"}}\n                [:span {:style {:margin-right \"5px\"}} description]\n                [:button {:on-click #(mark-done id)} \"Done\"]])))])\n\n\n(defn main-panel []\n  (let [name (rf/subscribe [::subs/name])\n        user @(rf/subscribe [::auth/user-auth])\n        db-connected? @(rf/subscribe [::db/realtime-value {:path [:.info :connected]}])\n        todos-path [:users (:uid user) :todos]\n        todos @(rf/subscribe [::db/realtime-value {:path todos-path}])]\n    [:div\n     [:h1 \"Hello from \" @name]\n     [auth-display user]\n(when user\n  (if db-connected?\n    [:div\n     [:br]\n     [add-todo (fn [todo]\n                 (rf/dispatch\n                  [::db/push {:value {:description todo}\n                              :path  todos-path}]))]\n     [todo-list todos\n      (fn [todo-id]\n        (rf/dispatch\n         [::db/push {:value true\n                     :path  (concat todos-path [todo-id :done?])}]))]]\n    [:div \"Loading..\"]))\n     ]))\n"]}