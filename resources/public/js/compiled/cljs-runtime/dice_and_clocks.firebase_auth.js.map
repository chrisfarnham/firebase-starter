{"version":3,"sources":["dice_and_clocks/firebase_auth.cljs"],"mappings":";AAKA,AAAA,AAAMA;AAAN,AAAkB,AAAWC;;AAE7B,AAAA,AAAMC,AAASC,AAAcC;AAA7B,AACM,AAACJ,AACD,AAAkBG,AAClB,AAAO,AAASE,AAGhB;AAHO,AAAA;AAGC,AAAKC;AAAL,AACE,AAAAC,AAAiB,AAAA,AAAgBH;AAAjC,AAAA,AAAAG;AAAA,AAAAA,AAASC;AAAT,AACE,AAACA,AAAAA,AAAAA,AAAQF,AAAAA;;AACT,AAACG,AAASH;;;;AAE5B,AAAA,AAAMI,AAAgBN;AAAtB,AACE,AAACF,AAAQ,AAAAS,AAAuCP;;AAElD,AAAA,AAACQ,AAA4BF;AAE7B,AAAA,AAAMG,AAAUC;AAAhB,AACM,AAACd,AACD,AACA,AAAQ,AAAKM;AAAL,AAAQ,AAAAS,AAAI,AAAAC,AAAKF;AAAL,AAAA,AAAAE;AAAmB,AAACF,AAAAA,AAAAA,AAAcR,AAAAA;;AAAlCU;;;AAAJ,AAAA,AAAAD;AAAAA;;AACI,AAACE,AAAeX;;;;AACxC,AAAA,AAAM,AAAYY;;AAEpB,AAAA,AAACN,AAAqBC;AAEtB,AAAA,AAAMM,AAAgBC;AAAtB,AACE,AAAMA;AAAN,AAAA,AAAA,AAAA,AAAA,AACiB,AAASA,AACT,AAAOA,AACP,AAAeA;;AAHhC;;;AAKF,AAAA,AAAMC;AAAN,AACE,AAAMC,AAAW,AAAA,AAACC;AACZC,AAAS,AAAKC;AAAL,AACE,AAACC,AAAOJ,AAAW,AAACH,AAAWM;;AAC1CE,AAAe,AAAKF;AAAL,AAAQ,AAACC,AAAOJ,AAAWG;;AAHhD,AAIE,AAAqB,AAACzB,AACDwB,AACAG;;AACrBL;;AAEJ,AAAA,AAACM,AACWP,AACA,AAAKD;AAAL,AACE,AAAI,AAAI,AAACS,AAAIT,AAAM,AAAWU,AAASV;AAAvC;;AAEEA;;;AAEhB,AAAA,AAACQ,AACW;AAAA,AAAO,AAAA,AAAA,AAACG;AACR,AAAKC;AAAL,AACE,AAAMA;AAAN,AACE,AAAA,AAAMA;;AADR;;;AAGd,AAAA,AAACC,AAEA,AAAKC,AAAEA;AAAP,AAAA,AAAA,AAAA;;AAED,AAAA,AAACD,AAEA,AAAKC,AAAEA;AAAP,AAAA,AAAA,AAAA","names":["dice-and-clocks.firebase-auth/auth","js/firebase","dice-and-clocks.firebase-auth/sign-in","auth-provider","opts","result","e","temp__5752__auto__","handler","js/alert","dice-and-clocks.firebase-auth/google-sign-in","js/firebase.auth.GoogleAuthProvider","re-frame.core/reg-fx","dice-and-clocks.firebase-auth/sign-out","error-handler","or__4126__auto__","and__4115__auto__","js/console.log","js/window","dice-and-clocks.firebase-auth/user->data","user","dice-and-clocks.firebase-auth/user-info","auth-state","reagent.core.atom","callback","x","cljs.core/reset!","error-callback","re_frame.core.reg_sub","cljs.core/not","js/Error","re_frame.core.subscribe","auth","re_frame.core.reg_event_fx","_"],"sourcesContent":["(ns dice-and-clocks.firebase-auth\n  (:require [re-frame.core :as rf]\n            [cljs-bean.core :refer [->js ->clj]]\n            [reagent.core :as r]))\n\n(defn auth ^js [] (.auth ^js js/firebase))\n\n(defn sign-in [auth-provider opts]\n  (-> (auth)\n      (.signInWithPopup auth-provider)\n      (.then (fn [^js result]\n               ;don't need to do anything\n               ))\n      (.catch (fn [e]\n                (if-let [handler (:error-handler opts)]\n                  (handler e)\n                  (js/alert e))))))\n\n(defn google-sign-in [opts]\n  (sign-in (js/firebase.auth.GoogleAuthProvider.) opts))\n\n(rf/reg-fx ::google-sign-in  google-sign-in)\n\n(defn sign-out [error-handler]\n  (-> (auth)\n      (.signOut)\n      (.catch (fn [e] (or (and error-handler (error-handler e))\n                          (js/console.log e)))))\n  (set! (.-location js/window) \"/\"))\n\n(rf/reg-fx ::sign-out sign-out)\n\n(defn user->data [^js user]\n  (when user\n    {:email        (.-email user)\n     :uid          (.-uid user)\n     :display-name (.-displayName user)}))\n\n(defn user-info []\n  (let [auth-state (r/atom nil)\n        callback (fn [x]\n                   (reset! auth-state (user->data x)))\n        error-callback (fn [x] (reset! auth-state x))]\n    (.onAuthStateChanged (auth)\n                         callback\n                         error-callback)\n    auth-state))\n\n(rf/reg-sub ::user-auth\n            user-info\n            (fn [user]\n              (if (or (not user) (instance? js/Error user))\n                nil\n                user)))\n\n(rf/reg-sub ::uid\n            (fn [] (rf/subscribe [::user-auth]))\n            (fn [auth]\n              (when auth\n                (:uid auth))))\n\n(rf/reg-event-fx\n ::sign-in\n (fn [_ _] {::google-sign-in nil}))\n\n(rf/reg-event-fx\n ::sign-out\n (fn [_ _] {::sign-out nil}))"]}